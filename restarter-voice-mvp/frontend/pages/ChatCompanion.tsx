import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import VirtualAvatar from '../components/VirtualAvatar';
import { generateResponse } from '../lib/ai/generateResponse';
import { speak } from '../lib/ai/speak';
import { generateTalkingFace } from '../lib/ai/talkingFace';
import { getAuth, signOut } from 'firebase/auth';
import { useLanguage } from '../contexts/LanguageContext';
import { LanguageSelector } from '../components/LanguageSelector';
import Footer from '../components/Footer';
import { TokenRenewalModal } from '../components/TokenRenewalModal';
import { UpgradeModal } from '../components/UpgradeModal';
import { usePermission } from '../hooks/usePermission';
import { useTestMode } from '../App';

interface ChatMsg {
  id: string;
  text: string;
  sender: 'user' | 'ai';
  status?: 'streaming' | 'done';
  audio?: string;
}

type LanguageCode = 'zh-TW' | 'zh-CN' | 'en' | 'ja' | 'ko' | 'vi' | 'th' | 'la' | 'ms';

const LANGS: { code: LanguageCode; label: string }[] = [
  { code: 'zh-TW', label: 'ÁπÅ‰∏≠' },
  { code: 'zh-CN', label: 'ÁÆÄ‰∏≠' },
  { code: 'en', label: 'EN' },
  { code: 'ja', label: 'Êó•Êú¨Ë™û' },
  { code: 'ko', label: 'ÌïúÍµ≠Ïñ¥' },
  { code: 'vi', label: 'Ti·∫øng Vi·ªát' },
  { code: 'th', label: '‡πÑ‡∏ó‡∏¢' },
  { code: 'la', label: 'Latina' },
  { code: 'ms', label: 'Bahasa Melayu' },
];

const AVATAR_FILES = [
  'Annie.png', 'berlex.png', 'Bray.png', 'Cayly.png', 'Derxl.png', 'El.png',
  'Fenny.png', 'Gily.png', 'Henny.png', 'Jesy.png', 'Karl.png', 'michy.png',
  'Mily.png', 'Neysher.png', 'sandy.png', 'Sherl.png', 'Shu.png', 'Shyly.png'
];

const AVATAR_LIST = AVATAR_FILES.map(f => `/avatars/${f}`);
const AVATAR_NAMES = AVATAR_FILES.map(f => f.replace(/\.png$/i, ''));

const TEXTS: Record<LanguageCode, any> = {
  'zh-TW': {
    friend: 'ÊúãÂèã',
    avatarTitle: 'ÈÅ∏ÊàëÂÅö‰Ω†ÁöÑÊúãÂèã',
    companionPhrase: ['üïäÔ∏è ÂÆàÂú®Êµ∑ÈÄôÁ´ØÔºå', 'ÊàëÈÉΩËÅΩËëóÂë¢„ÄÇ'],
    changeAvatar: 'Êõ¥ÊèõÊàëÁöÑÈ†≠ÂÉè',
    aiReplyTemplate: (text: string) => `AIÈô™ËÅäÔºöÊàëÊòéÁôΩ‰Ω†ÁöÑÊÑèÊÄùÔºå„Äå${text}„ÄçÔºåËÆìÊàëÂÜçÂ§öËÅΩ‰Ω†Ë™™Ë™™...`,
    aiSystemPrompt: '‰Ω†ÊòØ‰∏ÄÂÄãÊ∫´Êöñ„ÄÅÂñÑËß£‰∫∫ÊÑèÁöÑËôõÊì¨‰∫∫ÔºåË´ãÁî®ÈºìÂãµ„ÄÅÊ≠£ÂêëË™ûÊ∞£ÂõûÊáâ„ÄÇ',
    speechErrorBrowser: 'Ê≠§ÁÄèË¶ΩÂô®‰∏çÊîØÊè¥Ë™ûÈü≥Ëæ®Ë≠òÔºåË´ãÊîπÁî® Chrome/Edge„ÄÇ',
    speechErrorFail: 'Ë™ûÈü≥Ëæ®Ë≠òÂ§±ÊïóÔºåË´ãÂÜçË©¶‰∏ÄÊ¨°„ÄÇ',
    speechErrorNoDetect: 'Ê≤íÊúâÂÅµÊ∏¨Âà∞Ë™ûÈü≥ÔºåË´ãÂÜçË©¶‰∏ÄÊ¨°„ÄÇ',
    logout: 'ÁôªÂá∫',
    inputPlaceholder: 'ÊàñËÄÖÔºåÁõ¥Êé•Ëº∏ÂÖ•ÊñáÂ≠ó... (Enter ÈÄÅÂá∫)',
    welcome: (name: string) => `Âó®Ôºå${name}ÔºåÊàëÊòØ‰Ω†ÁöÑ AI ÊúãÂèãÔºå‰Ω†ÂèØ‰ª•ÈñãÂßãË∑üÊàëË™™Ë©±ÂõâÔºÅ`,
    welcomePickAvatar: (name: string) => `Âó®Ôºå${name}ÔºåÂÖàÂπ´ÊàëÈÅ∏ÂÄãÈ†≠ÂÉèÂæåÊàëÂÄëÂÜçËºïÈ¨ÜËá™Âú®ÔºåÂ§©ÂçóÂú∞ÂåóÁóõÂø´ËÅä...`,
    welcomeChat: (avatar: string, name: string) => `${avatar}Ë™™ÔºöÂó®Ôºå${name}Ôºå‰ªäÂ§©ÊÉ≥ËÅäÈªû‰ªÄÈ∫ºÂë¢Ôºü`,
    whoAmI: '‰Ω†ÊÉ≥ÊàëÊòØË™∞Ôºü',
    tapToTalk: 'Êåâ‰∏Ä‰∏ãÈñãÂßãË™ûÈü≥ËÅäÂ§©...',
    aiReplying: 'AI Ê≠£Âú®ÂõûË¶Ü‰∏≠ÔºåËº∏ÂÖ•Êñ∞Ë®äÊÅØÂèØÁ´ãÂç≥ÊâìÊñ∑',
    recognizing: 'Ê≠£Âú®Ëæ®Ë≠ò‰∏≠...',
  },
  'zh-CN': {
    friend: 'ÊúãÂèã',
    avatarTitle: 'ÈÄâÊàëÂÅö‰Ω†ÁöÑÊúãÂèã',
    companionPhrase: ['üïäÔ∏è ÂÆàÂú®Êµ∑ËøôÁ´ØÔºå', 'ÊàëÈÉΩÂê¨ÁùÄÂë¢„ÄÇ'],
    changeAvatar: 'Êõ¥Êç¢ÊàëÁöÑÂ§¥ÂÉè',
    aiReplyTemplate: (text: string) => `AIÈô™ËÅäÔºöÊàëÊòéÁôΩ‰Ω†ÁöÑÊÑèÊÄùÔºå"${text}"ÔºåËÆ©ÊàëÂÜçÂ§öÂê¨‰Ω†ËÅäËÅä...`,
    aiSystemPrompt: '‰Ω†ÊòØ‰∏Ä‰∏™Ê∏©Êöñ„ÄÅÂñÑËß£‰∫∫ÊÑèÁöÑËôöÊãü‰∫∫ÔºåËØ∑Áî®ÈºìÂä±„ÄÅÊ≠£ÂêëËØ≠Ê∞îÂõûÂ∫î„ÄÇ',
    speechErrorBrowser: 'Ê≠§ÊµèËßàÂô®‰∏çÊîØÊåÅËØ≠Èü≥ËØÜÂà´ÔºåËØ∑ÊîπÁî® Chrome/Edge„ÄÇ',
    speechErrorFail: 'ËØ≠Èü≥ËØÜÂà´Â§±Ë¥•ÔºåËØ∑ÂÜçËØï‰∏ÄÊ¨°„ÄÇ',
    speechErrorNoDetect: 'Ê≤°ÊúâÊ£ÄÊµãÂà∞ËØ≠Èü≥ÔºåËØ∑ÂÜçËØï‰∏ÄÊ¨°„ÄÇ',
    logout: 'ÁôªÂá∫',
    inputPlaceholder: 'ÊàñËÄÖÔºåÁõ¥Êé•ËæìÂÖ•ÊñáÂ≠ó... (Enter ÂèëÈÄÅ)',
    welcome: (name: string) => `Âó®Ôºå${name}ÔºåÊàëÊòØ‰Ω†ÁöÑ AI ÊúãÂèãÔºå‰Ω†ÂèØ‰ª•ÂºÄÂßãË∑üÊàëËØ¥ËØùÂï∞ÔºÅ`,
    welcomePickAvatar: (name: string) => `Âó®Ôºå${name}ÔºåÂÖàÂ∏ÆÊàëÈÄâ‰∏™Â§¥ÂÉèÂêéÊàë‰ª¨ÂÜçËΩªÊùæËá™Âú®ÔºåÂ§©ÂçóÂú∞ÂåóÁïÖÂø´ËÅä...`,
    welcomeChat: (avatar: string, name:string) => `${avatar}ËØ¥ÔºöÂó®Ôºå${name}Ôºå‰ªäÂ§©ÊÉ≥ËÅäÁÇπ‰ªÄ‰πàÂë¢Ôºü`,
    whoAmI: '‰Ω†ÊÉ≥ÊàëÊòØË∞ÅÔºü',
    tapToTalk: 'ÁÇπ‰∏Ä‰∏ãÂºÄÂßãËØ≠Èü≥ËÅäÂ§©...',
    aiReplying: 'AI Ê≠£Âú®ÂõûÂ§ç‰∏≠ÔºåËæìÂÖ•Êñ∞Ê∂àÊÅØÂèØÁ´ãÂç≥ÊâìÊñ≠',
    recognizing: 'Ê≠£Âú®ËØÜÂà´‰∏≠...',
  },
  'en': {
    friend: 'Friend',
    avatarTitle: 'Pick Me as Your Friend',
    companionPhrase: ["üïäÔ∏è I'm here by the sea,", "I'm listening."],
    changeAvatar: 'Change My Avatar',
    aiReplyTemplate: (text: string) => `AI Chat: I understand what you mean, "${text}", let me hear more from you...`,
    aiSystemPrompt: 'You are a warm, empathetic virtual person. Please respond in an encouraging and positive tone.',
    speechErrorBrowser: 'This browser does not support speech recognition. Please use Chrome/Edge.',
    speechErrorFail: 'Speech recognition failed, please try again.',
    speechErrorNoDetect: 'No speech detected, please try again.',
    logout: 'Logout',
    inputPlaceholder: 'Or, type text directly... (Enter to send)',
    welcome: (name: string) => `Hi, ${name}, I'm your AI friend. You can start talking to me now!`,
    welcomePickAvatar: (name: string) => `Hi, ${name}, pick my avatar and let's chat freely!`,
    welcomeChat: (avatar: string, name: string) => `${avatar}: Hi, ${name}, what do you want to talk about today?`,
    whoAmI: 'Who do you want me to be?',
    tapToTalk: 'Tap to start voice chat...',
    aiReplying: 'AI is replying, type a new message to interrupt.',
    recognizing: 'Recognizing...',
  },
  'ja': {
    friend: 'ÂèãÈÅî',
    avatarTitle: 'ÂèãÈÅî„Å´ÈÅ∏„Çì„Åß„Å≠',
    companionPhrase: ['üïäÔ∏è „Åì„ÅÆÊµ∑Ëæ∫„ÅßÂæÖ„Å£„Å¶„Çã„Çà„ÄÅ', '„Åö„Å£„Å®ËÅû„ÅÑ„Å¶„ÅÑ„Çã„Åã„Çâ„ÄÇ'],
    changeAvatar: '„Ç¢„Éê„Çø„Éº„ÇíÂ§âÊõ¥',
    aiReplyTemplate: (text: string) => `AI„ÉÅ„É£„ÉÉ„ÉàÔºö„ÅÇ„Å™„Åü„ÅÆË®Ä„ÅÜ„Åì„Å®„ÄÅ„Äå${text}„Äç„ÄÅ„Çè„Åã„Çä„Åæ„Åô„ÄÇ„ÇÇ„Å£„Å®ËÅû„Åã„Åõ„Å¶„Åè„Å†„Åï„ÅÑ...`,
    aiSystemPrompt: '„ÅÇ„Å™„Åü„ÅØÊ∏©„Åã„Åè„ÄÅÂÖ±ÊÑüÁöÑ„Å™„Éê„Éº„ÉÅ„É£„É´„Éë„Éº„ÇΩ„É≥„Åß„Åô„ÄÇÂä±„Åæ„Åó„Å®„Éù„Ç∏„ÉÜ„Ç£„Éñ„Å™„Éà„Éº„É≥„ÅßÂøúÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
    speechErrorBrowser: '„Åì„ÅÆ„Éñ„É©„Ç¶„Ç∂„ÅØÈü≥Â£∞Ë™çË≠ò„Å´ÂØæÂøú„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇChrome/Edge„Çí‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
    speechErrorFail: 'Èü≥Â£∞Ë™çË≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ',
    speechErrorNoDetect: 'Èü≥Â£∞„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ',
    logout: '„É≠„Ç∞„Ç¢„Ç¶„Éà',
    inputPlaceholder: '„ÅÇ„Çã„ÅÑ„ÅØ„ÄÅÁõ¥Êé•„ÉÜ„Ç≠„Çπ„Éà„ÇíÂÖ•Âäõ... (Enter„ÅßÈÄÅ‰ø°)',
    welcome: (name: string) => `„Åì„Çì„Å´„Å°„ÅØ„ÄÅ${name}„Åï„Çì„ÄÇ„ÅÇ„Å™„Åü„ÅÆAI„ÅÆÂèãÈÅî„Åß„Åô„ÄÇ„Åï„ÅÇ„ÄÅË©±„Åó„Åæ„Åó„Çá„ÅÜÔºÅ`,
    welcomePickAvatar: (name: string) => `„ÇÑ„ÅÇ„ÄÅ${name}„ÄÅ„Åæ„Åö„ÅØÁßÅ„ÅÆ„Ç¢„Éê„Çø„Éº„ÇíÈÅ∏„Çì„Åß„Åã„Çâ„ÄÅÊ∞óËªΩ„Å´‰Ωï„Åß„ÇÇË©±„Åù„ÅÜÔºÅ`,
    welcomeChat: (avatar: string, name: string) => `${avatar}Ôºö„ÇÑ„ÅÇ„ÄÅ${name}„ÄÅ‰ªäÊó•„ÅØ‰Ωï„ÇíË©±„Åù„ÅÜ„ÅãÔºü`,
    whoAmI: 'ÁßÅ„ÅåË™∞„Åß„ÅÇ„Å£„Å¶„Åª„Åó„ÅÑ„Åß„Åô„ÅãÔºü',
    tapToTalk: '„Çø„ÉÉ„Éó„Åó„Å¶Èü≥Â£∞„ÉÅ„É£„ÉÉ„ÉàÈñãÂßã',
    aiReplying: 'AI„ÅåËøî‰ø°‰∏≠„Åß„Åô„ÄÇÊñ∞„Åó„ÅÑ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÖ•Âäõ„Åô„Çã„Å®„Åô„Åê„Å´‰∏≠Êñ≠„Åß„Åç„Åæ„Åô',
    recognizing: 'Ë™çË≠ò‰∏≠...',
  },
  'ko': {
    friend: 'ÏπúÍµ¨',
    avatarTitle: 'ÎÇòÎ•º ÏπúÍµ¨Î°ú ÏÑ†ÌÉùÌï¥Ï§ò',
    companionPhrase: ['üïäÔ∏è Î∞îÎã§ Ïù¥Ìé∏ÏóêÏÑú ÏßÄÌÇ§Í≥† ÏûàÏùÑÍ≤å,', 'Îã§ Îì£Í≥† ÏûàÏñ¥.'],
    changeAvatar: 'ÎÇ¥ ÏïÑÎ∞îÌÉÄ Î≥ÄÍ≤Ω',
    aiReplyTemplate: (text: string) => `AI Ï±ÑÌåÖ: Î¨¥Ïä® ÎßêÏù∏ÏßÄ ÏïåÍ≤†Ïñ¥, "${text}", Îçî ÏñòÍ∏∞Ìï¥Ï§ò...`,
    aiSystemPrompt: 'ÎãπÏã†ÏùÄ Îî∞ÎúªÌïòÍ≥† Í≥µÍ∞ê Îä•Î†•Ïù¥ Îõ∞Ïñ¥ÎÇú Í∞ÄÏÉÅ Ïù∏Í∞ÑÏûÖÎãàÎã§. Í≤©Î†§ÌïòÍ≥† Í∏çÏ†ïÏ†ÅÏù∏ ÌÜ§ÏúºÎ°ú ÏùëÎãµÌï¥Ï£ºÏÑ∏Ïöî.',
    speechErrorBrowser: 'Ïù¥ Î∏åÎùºÏö∞Ï†ÄÎäî ÏùåÏÑ± Ïù∏ÏãùÏùÑ ÏßÄÏõêÌïòÏßÄ ÏïäÏäµÎãàÎã§. Chrome/EdgeÎ•º ÏÇ¨Ïö©Ìï¥Ï£ºÏÑ∏Ïöî.',
    speechErrorFail: 'ÏùåÏÑ± Ïù∏ÏãùÏù¥ Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.',
    speechErrorNoDetect: 'ÏùåÏÑ±Ïù¥ Í∞êÏßÄÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.',
    logout: 'Î°úÍ∑∏ÏïÑÏõÉ',
    inputPlaceholder: 'ÏïÑÎãàÎ©¥, ÏßÅÏ†ë ÌÖçÏä§Ìä∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî... (EnterÎ°ú Ï†ÑÏÜ°)',
    welcome: (name: string) => `ÏïàÎÖï, ${name}. ÎÇòÎäî ÎÑàÏùò AI ÏπúÍµ¨Ïïº. Ïù¥Ï†ú ÎÇòÏóêÍ≤å ÎßêÏùÑ Í±∏ Ïàò ÏûàÏñ¥!`,
    welcomePickAvatar: (name: string) => `ÏïàÎÖï, ${name}. Î®ºÏ†Ä ÎÇ¥ ÏïÑÎ∞îÌÉÄÎ•º Í≥†Î•¥Í≥† ÏûêÏú†Î°≠Í≤å ÏñòÍ∏∞ÌïòÏûê!`,
    welcomeChat: (avatar: string, name: string) => `${avatar}: ÏïàÎÖï, ${name}, Ïò§Îäò Î¨¥Ïä® ÏñòÍ∏∞ÌïòÍ≥† Ïã∂Ïñ¥?`,
    whoAmI: 'ÎÇ¥Í∞Ä ÎàÑÍµ¨ÏòÄÏúºÎ©¥ Ï¢ãÍ≤†Ïñ¥?',
    tapToTalk: 'ÌÉ≠ÌïòÏó¨ ÏùåÏÑ± Ï±ÑÌåÖ ÏãúÏûë...',
    aiReplying: 'AIÍ∞Ä ÎãµÏû• Ï§ëÏûÖÎãàÎã§. ÏÉà Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏó¨ Ï§ëÎã®Ìï† Ïàò ÏûàÏäµÎãàÎã§.',
    recognizing: 'Ïù∏Ïãù Ï§ë...',
  },
  'vi': {
    friend: 'B·∫°n b√®',
    avatarTitle: 'Ch·ªçn t√¥i l√†m b·∫°n c·ªßa b·∫°n',
    companionPhrase: ['üïäÔ∏è Em ·ªü ƒë√¢y b√™n b·ªù bi·ªÉn,', 'Em ƒëang l·∫Øng nghe ƒë√¢y.'],
    changeAvatar: 'Thay ƒë·ªïi Avatar c·ªßa t√¥i',
    aiReplyTemplate: (text: string) => `Tr√≤ chuy·ªán AI: T√¥i hi·ªÉu √Ω b·∫°n, "${text}", h√£y cho t√¥i nghe th√™m...`,
    aiSystemPrompt: 'B·∫°n l√† m·ªôt ng∆∞·ªùi ·∫£o ·∫•m √°p, ƒë·ªìng c·∫£m. Vui l√≤ng tr·∫£ l·ªùi b·∫±ng gi·ªçng ƒëi·ªáu kh√≠ch l·ªá v√† t√≠ch c·ª±c.',
    speechErrorBrowser: 'Tr√¨nh duy·ªát n√†y kh√¥ng h·ªó tr·ª£ nh·∫≠n d·∫°ng gi·ªçng n√≥i. Vui l√≤ng s·ª≠ d·ª•ng Chrome/Edge.',
    speechErrorFail: 'Nh·∫≠n d·∫°ng gi·ªçng n√≥i th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.',
    speechErrorNoDetect: 'Kh√¥ng ph√°t hi·ªán th·∫•y gi·ªçng n√≥i, vui l√≤ng th·ª≠ l·∫°i.',
    logout: 'ƒêƒÉng xu·∫•t',
    inputPlaceholder: 'Ho·∫∑c, nh·∫≠p vƒÉn b·∫£n tr·ª±c ti·∫øp... (Enter ƒë·ªÉ g·ª≠i)',
    welcome: (name: string) => `Ch√†o, ${name}. T√¥i l√† ng∆∞·ªùi b·∫°n AI c·ªßa b·∫°n. B√¢y gi·ªù b·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu n√≥i chuy·ªán v·ªõi t√¥i!`,
    welcomePickAvatar: (name: string) => `Ch√†o, ${name}, h√£y ch·ªçn avatar c·ªßa t√¥i v√† ch√∫ng ta h√£y tr√≤ chuy·ªán tho·∫£i m√°i!`,
    welcomeChat: (avatar: string, name: string) => `${avatar}: Ch√†o, ${name}, h√¥m nay b·∫°n mu·ªën n√≥i v·ªÅ ƒëi·ªÅu g√¨?`,
    whoAmI: 'B·∫°n mu·ªën t√¥i l√† ai?',
    tapToTalk: 'Nh·∫•n ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán tho·∫°i...',
    aiReplying: 'AI ƒëang tr·∫£ l·ªùi, nh·∫≠p tin nh·∫Øn m·ªõi ƒë·ªÉ ng·∫Øt.',
    recognizing: 'ƒêang nh·∫≠n d·∫°ng...',
  },
  'th': {
    friend: '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô',
    avatarTitle: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏â‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
    companionPhrase: ['üïäÔ∏è ‡∏â‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏£‡∏¥‡∏°‡∏ó‡∏∞‡πÄ‡∏•,', '‡∏â‡∏±‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ü‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà'],
    changeAvatar: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏ß‡∏ï‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô',
    aiReplyTemplate: (text: string) => `‡πÅ‡∏ä‡∏ó AI: ‡∏â‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á, "${text}", ‡πÄ‡∏•‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏≠‡∏µ‡∏Å‡∏™‡∏¥...`,
    aiSystemPrompt: '‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÄ‡∏™‡∏°‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ß‡∏Å',
    speechErrorBrowser: '‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ Chrome/Edge',
    speechErrorFail: '‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
    speechErrorNoDetect: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏π‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
    logout: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö',
    inputPlaceholder: '‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á... (Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á)',
    welcome: (name: string) => `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, ${name}. ‡∏â‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô AI ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!`,
    welcomePickAvatar: (name: string) => `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, ${name}, ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏ß‡∏ï‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏¥‡∏™‡∏£‡∏∞!`,
    welcomeChat: (avatar: string, name: string) => `${avatar}: ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, ${name}, ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏£?`,
    whoAmI: '‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏â‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏Ñ‡∏£?',
    tapToTalk: '‡πÅ‡∏ï‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á...',
    aiReplying: 'AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö, ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏±‡∏î‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞',
    recognizing: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏î‡∏à‡∏≥...',
  },
  'la': {
    friend: 'Amicus',
    avatarTitle: 'Elige Me ut Amicum Tuum',
    companionPhrase: ['üïäÔ∏è Hic adsum ad mare,', 'Audio.'],
    changeAvatar: 'Muta Imaginem Meam',
    aiReplyTemplate: (text: string) => `AI Curabitur: Intellego quid velis, "${text}", sine me plura a te audire...`,
    aiSystemPrompt: 'Tu es persona virtualis calida et empathetica. Quaeso responde sono hortanti et positivo.',
    speechErrorBrowser: 'Hic navigator recognitionem vocis non sustinet. Quaeso utere Chrome/Edge.',
    speechErrorFail: 'Recognitio vocis defecit, quaeso iterum conare.',
    speechErrorNoDetect: 'Nulla oratio detecta, quaeso iterum conare.',
    logout: 'Exire',
    inputPlaceholder: 'Aut, textum directe scribe... (Enter mittere)',
    welcome: (name: string) => `Salve, ${name}. Amicus tuus AI sum. Iam potes mecum loqui!`,
    welcomePickAvatar: (name: string) => `Salve, ${name}, elige imaginem meam et libere loquamur!`,
    welcomeChat: (avatar: string, name: string) => `${avatar}: Salve, ${name}, de quo hodie loqui vis?`,
    whoAmI: 'Quis vis me esse?',
    tapToTalk: 'Tange ut colloquium vocale incipias...',
    aiReplying: 'AI respondet, scribe novum nuntium ad interrumpendum.',
    recognizing: 'Agnoscens...',
  },
  'ms': {
    friend: 'Kawan',
    avatarTitle: 'Pilih Saya sebagai Kawan Anda',
    companionPhrase: ['üïäÔ∏è Saya di sini di tepi laut,', 'Saya sedang mendengar.'],
    changeAvatar: 'Tukar Avatar Saya',
    aiReplyTemplate: (text: string) => `Sembang AI: Saya faham maksud awak, "${text}", beritahu saya lagi...`,
    aiSystemPrompt: 'Anda adalah orang maya yang mesra dan empati. Sila balas dengan nada yang menggalakkan dan positif.',
    speechErrorBrowser: 'Pelayar ini tidak menyokong pengecaman pertuturan. Sila gunakan Chrome/Edge.',
    speechErrorFail: 'Pengecaman pertuturan gagal, sila cuba lagi.',
    speechErrorNoDetect: 'Tiada pertuturan dikesan, sila cuba lagi.',
    logout: 'Log keluar',
    inputPlaceholder: 'Atau, taip teks secara terus... (Enter untuk hantar)',
    welcome: (name: string) => `Hai, ${name}. Saya kawan AI anda. Anda boleh mula bercakap dengan saya sekarang!`,
    welcomePickAvatar: (name: string) => `Hai, ${name}, pilih avatar saya dan mari berbual dengan bebas!`,
    welcomeChat: (avatar: string, name: string) => `${avatar}: Hai, ${name}, apa yang anda mahu bualkan hari ini?`,
    whoAmI: 'Awak nak saya jadi siapa?',
    tapToTalk: 'Ketik untuk memulakan sembang suara...',
    aiReplying: 'AI sedang membalas, taip mesej baru untuk mengganggu.',
    recognizing: 'Mengecam...',
  },
};

// 1. Â§öË™ûË®ÄËøîÂõûËàáÊõ¥ÊèõÈ†≠ÂÉè
const BACK_TEXT = {
  'zh-TW': 'ËøîÂõû',
  'zh-CN': 'ËøîÂõû',
  'en': 'Back',
  'ja': 'Êàª„Çã',
  'ko': 'Îí§Î°ú',
  'th': '‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö',
  'vi': 'Quay l·∫°i',
  'ms': 'Kembali',
  'la': 'Redi',
};
const CHANGE_AVATAR_TEXT = {
  'zh-TW': 'Êõ¥ÊèõÈ†≠ÂÉè',
  'zh-CN': 'Êõ¥Êç¢Â§¥ÂÉè',
  'en': 'Change Avatar',
  'ja': '„Ç¢„Éê„Çø„Éº„ÇíÂ§âÊõ¥',
  'ko': 'ÏïÑÎ∞îÌÉÄ Î≥ÄÍ≤Ω',
  'th': '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß',
  'vi': 'ƒê·ªïi avatar',
  'ms': 'Tukar Avatar',
  'la': 'Muta Imaginem',
};

// 1. Â§öË™ûË®Ä‰∏ªÂâØÊ®ôÈ°å
const MAIN_TITLE = {
  'zh-TW': 'ËÆìÊàëÂÄë‰æÜËÅäÂ§©...',
  'zh-CN': 'ËÆ©Êàë‰ª¨Êù•ËÅäÂ§©...',
  'en': "Let's Chat...",
  'ja': '„Åï„ÅÇ„ÄÅË©±„Åù„ÅÜ...',
  'ko': 'Ìï®Íªò Ïù¥ÏïºÍ∏∞Ìï¥Ïöî...',
  'th': '‡∏°‡∏≤‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞...',
  'vi': 'H√£y tr√≤ chuy·ªán n√†o...',
  'ms': 'Mari Berbual...',
  'la': 'Colloquamur...'
};
const SUB_TITLE = {
  'zh-TW': 'ËÅä‰ªÄÈ∫ºÈÉΩÂèØ‰ª•Âñî üòä',
  'zh-CN': 'ËÅä‰ªÄ‰πàÈÉΩÂèØ‰ª•Âì¶ üòä',
  'en': 'Anything is okay to talk about üòä',
  'ja': '‰Ωï„Åß„ÇÇË©±„Åó„Å¶„ÅÑ„ÅÑ„Çà üòä',
  'ko': 'Î¨¥ÏóáÏù¥Îì† Ïù¥ÏïºÍ∏∞Ìï¥ÎèÑ ÎèºÏöî üòä',
  'th': '‡∏Ñ‡∏∏‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ üòä',
  'vi': 'N√≥i g√¨‡∏Å‡πá‡πÑ‡∏î‡πâ nh√© üòä',
  'ms': 'Boleh berbual apa sahaja üòä',
  'la': 'De omnibus loqui licet üòä'
};

export default function ChatCompanion() {
  const navigate = useNavigate();
  const [messages, setMessages] = useState<ChatMsg[]>([]);
  const [input, setInput] = useState('');
  const [aiStreaming, setAIStreaming] = useState(false);
  const aiTimeout = useRef<NodeJS.Timeout|null>(null);
  const inputRef = useRef<HTMLInputElement>(null);
  const chatContainerRef = useRef<HTMLDivElement>(null);
  const [showInput, setShowInput] = useState(false);
  const [recording, setRecording] = useState(false);
  const [aiAvatar, setAiAvatar] = useState<string>('');
  const [showAvatarSelect, setShowAvatarSelect] = useState(false);
  const [avatarVideo, setAvatarVideo] = useState<string>('');
  const [avatarAudio, setAvatarAudio] = useState<string>('');
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [recognizing, setRecognizing] = useState(false);
  const [speechError, setSpeechError] = useState('');
  const [lastTranscript, setLastTranscript] = useState('');
  
  const { lang, setLang } = useLanguage();
  const t = TEXTS[lang] || TEXTS['zh-TW'];
  const recognitionRef = useRef<any>(null);
  const { isTestMode } = useTestMode();

  // Êñ∞Â¢ûÔºöË™ûÈü≥Ëá™ÂãïÂæ™Áí∞ÊéßÂà∂
  const [autoVoiceLoop, setAutoVoiceLoop] = useState(false);
  const voiceLoopTimeout = useRef<NodeJS.Timeout|null>(null);
  // Êñ∞Â¢ûÔºöÂº∑Âà∂ÊéßÂà∂È∫•ÂÖãÈ¢®ÊåâÈàïÁãÄÊÖã
  const [forceStop, setForceStop] = useState(false);

  // Êñ∞Â¢ûÔºöÊ¨äÈôêÊ™¢Êü•
  const { checkPermission, recordUsage } = usePermission();
  const [showRenewalModal, setShowRenewalModal] = useState(false);
  const [showUpgradeModal, setShowUpgradeModal] = useState(false);
  const [permissionResult, setPermissionResult] = useState<any>(null);

  const getNickname = () => {
    const user = getAuth().currentUser;
    return (user && user.displayName) || localStorage.getItem('nickname') || t.friend;
  };

  const [nickname, setNickname] = useState(getNickname());
  const [lastUid, setLastUid] = useState(() => localStorage.getItem('lastUid'));
  const [firstAvatarSelected, setFirstAvatarSelected] = useState(() => !localStorage.getItem('avatarWelcomed'));
  const [isFirstChat, setIsFirstChat] = useState(() => !localStorage.getItem('aiAvatar'));
  const [uploadedAvatar, setUploadedAvatar] = useState<string>('');
  const fileInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    localStorage.setItem('lang', lang);
    setNickname(getNickname());
    
    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
    if (SpeechRecognition) {
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = true;
      recognitionRef.current.interimResults = true;
      recognitionRef.current.lang = lang;

      recognitionRef.current.onresult = (event: any) => {
        let interimTranscript = '';
        let finalTranscript = '';
        for (let i = event.resultIndex; i < event.results.length; ++i) {
          if (event.results[i].isFinal) {
            finalTranscript += event.results[i][0].transcript;
          } else {
            interimTranscript += event.results[i][0].transcript;
          }
        }
        
        setInput(lastTranscript + finalTranscript + interimTranscript);

        if (finalTranscript) {
          const fullText = lastTranscript + finalTranscript;
          setLastTranscript(prev => prev + finalTranscript);
          
          // ÁÑ°Ë´ñÊòØÊ∏¨Ë©¶Ê®°ÂºèÈÇÑÊòØÊ≠£Â∏∏Ê®°ÂºèÔºåÈÉΩËá™ÂãïÁôºÈÄÅË™ûÈü≥Ëæ®Ë≠òÁµêÊûú
          (async () => {
            const newUserMsg: ChatMsg = { id: `user-${Date.now()}`, text: fullText, sender: 'user' };
            setMessages(prev => [...prev, newUserMsg]);
            setInput('');
            
            if (aiTimeout.current) clearTimeout(aiTimeout.current);
            const newMsgId = `ai-${Date.now()}`;
            setMessages(prev => [...prev, { id: newMsgId, text: '', sender: 'ai', status: 'streaming' }]);
            setAIStreaming(true);
            
            try {
              const stream = await generateResponse(fullText, lang, t.aiSystemPrompt, isTestMode);
              let fullReply = '';
              for await (const chunk of stream) {
                fullReply += chunk;
                setMessages(prev => prev.map(m => m.id === newMsgId ? { ...m, text: fullReply } : m));
              }
              setMessages(prev => prev.map(m => m.id === newMsgId ? { ...m, status: 'done' } : m));
            } catch (error) {
              console.error("Error in AI pipeline: ", error);
              const errorMessage = error instanceof Error ? error.message : 'Êú™Áü•ÈåØË™§';
              setMessages(prev => prev.map(m => m.id === newMsgId ? { ...m, text: `APIÈåØË™§Ôºö${errorMessage}`, status: 'done' } : m));
            } finally {
              setAIStreaming(false);
            }
          })();
          // ÁßªÈô§Ëá™ÂãïÂÅúÊ≠¢ÈåÑÈü≥ÔºåËÆìË™ûÈü≥Ëæ®Ë≠òÊåÅÁ∫åÈÄ≤Ë°å
        }
      };

      recognitionRef.current.onerror = (event: any) => {
        console.error('Speech recognition error', event.error);
        let errorMsg = '';
        switch (event.error) {
          case 'no-speech':
            errorMsg = t.speechErrorNoDetect;
            break;
          case 'audio-capture':
          case 'network':
            errorMsg = t.speechErrorFail;
            break;
          default:
            errorMsg = '';
        }
        setSpeechError(errorMsg);
        setRecognizing(false);
        setRecording(false);
      };

      recognitionRef.current.onend = () => {
        setRecognizing(false);
        if (recording) {
          // If recording was stopped manually, don't restart.
          // If it stopped by itself, maybe restart it if needed.
        }
      };
    } else {
      setSpeechError(t.speechErrorBrowser);
    }
  }, [lang, t.speechErrorBrowser, t.speechErrorFail, t.speechErrorNoDetect, recording, lastTranscript]);

  useEffect(() => {
    if (!recognitionRef.current) return;
    // Ë™ûÈü≥Ëæ®Ë≠òÁµêÊùüÊôÇËá™ÂãïËß∏ÁôºAIÂõûË¶ÜËàáÂæ™Áí∞
    recognitionRef.current.onend = () => {
      setRecognizing(false);
      if (autoVoiceLoop && recording && !forceStop) {
        // ÂÅú‰∏ãÂæå0.1ÁßíËá™ÂãïAIÂõûË¶ÜÔºåÁÑ∂ÂæåËá™ÂãïÂÜçÂïüÂãïË™ûÈü≥Ëæ®Ë≠ò
        voiceLoopTimeout.current = setTimeout(() => {
          if (!recording || forceStop) return;
          if (input.trim()) {
            handleSend(input);
            setInput('');
            setLastTranscript('');
          }
          // AIÂõûË¶ÜÂÆåÂÜçËá™ÂãïÂïüÂãïË™ûÈü≥Ëæ®Ë≠ò
          setTimeout(() => {
            if (recording && autoVoiceLoop && !forceStop) {
              recognitionRef.current.start();
              setRecognizing(true);
            }
          }, 500); // AIÂõûË¶ÜÂæåÂÜçÂïüÂãïË™ûÈü≥Ëæ®Ë≠ò
        }, 100);
      }
    };
    // eslint-disable-next-line
  }, [autoVoiceLoop, recording, input, forceStop]);

  useEffect(() => {
    const savedAvatar = localStorage.getItem('aiAvatar');
    if (savedAvatar) {
      setAiAvatar(savedAvatar);
      setShowAvatarSelect(false);
    } else {
      setShowAvatarSelect(true);
    }
    
    const currentUid = getAuth().currentUser?.uid;
    if (currentUid !== lastUid) {
      localStorage.removeItem('aiAvatar');
      localStorage.removeItem('avatarWelcomed');
      setAiAvatar('');
      setLastUid(currentUid || null);
      if (currentUid) {
        localStorage.setItem('lastUid', currentUid);
      }
    }

    if (getAuth().currentUser) {
      setNickname(getAuth().currentUser?.displayName || t.friend);
    }

  }, [lastUid, t.friend]);

  // Ëá™ÂãïÊç≤ÂãïÂà∞ÊúÄÊñ∞Ë®äÊÅØ
  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [messages]);

  const handleLogout = async () => {
    try {
      await signOut(getAuth());
      localStorage.removeItem('nickname');
      localStorage.removeItem('lastUid');
      localStorage.removeItem('aiAvatar');
      localStorage.removeItem('avatarWelcomed');
      navigate('/');
    } catch (error) {
      console.error("Error signing out: ", error);
    }
  };

  const handleSelectAvatar = (url: string) => {
    setAiAvatar(url);
    localStorage.setItem('aiAvatar', url);
    setShowAvatarSelect(false);
    if (firstAvatarSelected) {
      setMessages([{ id: 'welcome-1', text: t.welcomeChat(getAvatarName(url), nickname), sender: 'ai' }]);
      localStorage.setItem('avatarWelcomed', 'true');
      setFirstAvatarSelected(false);
    }
  };

  const fakeAIReply = (userText: string) => {
    if (aiTimeout.current) clearTimeout(aiTimeout.current);
    const newMsgId = `ai-${Date.now()}`;
    setMessages(prev => [...prev, { id: newMsgId, text: '', sender: 'ai', status: 'streaming' }]);
    setAIStreaming(true);

    const replyText = t.aiReplyTemplate(userText);
    let i = 0;
    const interval = setInterval(() => {
      setMessages(prev => prev.map(m => m.id === newMsgId ? { ...m, text: replyText.substring(0, i) } : m));
      i++;
      if (i > replyText.length) {
        clearInterval(interval);
        setMessages(prev => prev.map(m => m.id === newMsgId ? { ...m, status: 'done' } : m));
        setAIStreaming(false);
      }
    }, 50);
  };

  const handleSend = async (text: string = input) => {
    if (!text.trim()) return;

    // Ê™¢Êü• AI ËÅäÂ§©Ê¨äÈôê
    const permission = await checkPermission('aiChat');
    if (!permission.allowed) {
      if (isTestMode) {
        // Ê∏¨Ë©¶Ê®°Âºè‰∏ãÁõ¥Êé•Âü∑Ë°åÔºå‰∏çÊ™¢Êü•Ê¨äÈôêÔºå‰ΩÜË™øÁî®ÁúüÂØ¶ÁöÑAI API
        const newUserMsg: ChatMsg = { id: `user-${Date.now()}`, text, sender: 'user' };
        setMessages(prev => [...prev, newUserMsg]);
        setInput('');
        setLastTranscript('');

        if (aiTimeout.current) clearTimeout(aiTimeout.current);
        const newMsgId = `ai-${Date.now()}`;
        setMessages(prev => [...prev, { id: newMsgId, text: '', sender: 'ai', status: 'streaming' }]);
        setAIStreaming(true);
        
        try {
          const stream = await generateResponse(text, lang, t.aiSystemPrompt, isTestMode);
          let fullReply = '';
          for await (const chunk of stream) {
            fullReply += chunk;
            setMessages(prev => prev.map(m => m.id === newMsgId ? { ...m, text: fullReply } : m));
          }

          setMessages(prev => prev.map(m => m.id === newMsgId ? { ...m, status: 'done' } : m));
        } catch (error) {
          console.error("Error in AI pipeline: ", error);
          const errorMessage = error instanceof Error ? error.message : 'Êú™Áü•ÈåØË™§';
          setMessages(prev => prev.map(m => m.id === newMsgId ? { ...m, text: `APIÈåØË™§Ôºö${errorMessage}`, status: 'done' } : m));
        } finally {
          setAIStreaming(false);
        }
        return;
      }
      if (permission.isFreeUser) {
        // ÂÖçË≤ªÁî®Êà∂È°ØÁ§∫ÂçáÁ¥öË∑≥Á™ó
        setShowUpgradeModal(true);
      } else if (permission.canRenew) {
        // Â∑≤Ë®ÇÈñ±Áî®Êà∂‰ΩÜ Token Áî®ÂÆåÔºåÈ°ØÁ§∫Á∫åË≥ºË∑≥Á™ó
        setPermissionResult(permission);
        setShowRenewalModal(true);
      } else {
        // ÂÖ∂‰ªñÊÉÖÊ≥Å‰πüÈ°ØÁ§∫Á∫åË≥ºË∑≥Á™ó
        setPermissionResult(permission);
        setShowRenewalModal(true);
      }
      return;
    }

    const newUserMsg: ChatMsg = { id: `user-${Date.now()}`, text, sender: 'user' };
    setMessages(prev => [...prev, newUserMsg]);
    setInput('');
    setLastTranscript('');

    if (aiTimeout.current) clearTimeout(aiTimeout.current);
    const newMsgId = `ai-${Date.now()}`;
    setMessages(prev => [...prev, { id: newMsgId, text: '', sender: 'ai', status: 'streaming' }]);
    setAIStreaming(true);
    
    try {
      const stream = await generateResponse(text, lang, t.aiSystemPrompt, isTestMode);
      let fullReply = '';
      for await (const chunk of stream) {
        fullReply += chunk;
        setMessages(prev => prev.map(m => m.id === newMsgId ? { ...m, text: fullReply } : m));
      }
      setMessages(prev => prev.map(m => m.id === newMsgId ? { ...m, status: 'done' } : m));
      
      setIsSpeaking(true);
      // Êö´ÊôÇË∑≥ÈÅéË™ûÈü≥ÂíåÂΩ±ÁâáÁîüÊàê
      // const audioUrl = await speak(fullReply, lang);
      // setAvatarAudio(audioUrl);
      // const videoUrl = await generateTalkingFace(fullReply, aiAvatar);
      // setAvatarVideo(videoUrl);
      
      // Ë®òÈåÑ‰ΩøÁî®Èáè
      await recordUsage('aiChat', 2); // AI ËÅäÂ§©Ê∂àËÄó 2 tokens
      
    } catch (error) {
      console.error("Error in AI pipeline: ", error);
      setMessages(prev => prev.map(m => m.id === newMsgId ? { ...m, text: 'Oops, something went wrong.', status: 'done' } : m));
    } finally {
      setAIStreaming(false);
      setIsSpeaking(false);
    }
  };

  const getAvatarName = (url: string) => {
    if (!url) return '';
    const parts = url.split('/');
    return parts[parts.length - 1].replace(/\.png$/i, '');
  };

  const handleRecordVoice = async () => {
    if (!recognitionRef.current) return;
    
    if (recording || autoVoiceLoop || recognizing) {
      recognitionRef.current.stop();
      setRecording(false);
      setRecognizing(false);
      setAutoVoiceLoop(false); // ÂÅúÊ≠¢Ëá™ÂãïÂæ™Áí∞
      if (voiceLoopTimeout.current) clearTimeout(voiceLoopTimeout.current);
      setForceStop(true); // Âº∑Âà∂ÂÅúÊ≠¢
    } else {
      // Ê™¢Êü•Ë™ûÈü≥Ê¨äÈôê
      const permission = await checkPermission('aiChat');
      if (!permission.allowed) {
        if (isTestMode) {
          // Ê∏¨Ë©¶Ê®°Âºè‰∏ãÁõ¥Êé•Âü∑Ë°åÔºå‰∏çÊ™¢Êü•Ê¨äÈôê
          setLastTranscript('');
          setInput('');
          recognitionRef.current.start();
          setRecording(true);
          setRecognizing(true);
          setSpeechError('');
          setAutoVoiceLoop(true); // ÂïüÂãïËá™ÂãïÂæ™Áí∞
          setForceStop(false);
          return;
        }
        if (permission.isFreeUser) {
          // ÂÖçË≤ªÁî®Êà∂È°ØÁ§∫ÂçáÁ¥öË∑≥Á™ó
          setShowUpgradeModal(true);
        } else if (permission.canRenew) {
          // Â∑≤Ë®ÇÈñ±Áî®Êà∂‰ΩÜ Token Áî®ÂÆåÔºåÈ°ØÁ§∫Á∫åË≥ºË∑≥Á™ó
          setPermissionResult(permission);
          setShowRenewalModal(true);
        } else {
          // ÂÖ∂‰ªñÊÉÖÊ≥Å‰πüÈ°ØÁ§∫Á∫åË≥ºË∑≥Á™ó
          setPermissionResult(permission);
          setShowRenewalModal(true);
        }
        return;
      }

      setLastTranscript('');
      setInput('');
      recognitionRef.current.start();
      setRecording(true);
      setRecognizing(true);
      setSpeechError('');
      setAutoVoiceLoop(true); // ÂïüÂãïËá™ÂãïÂæ™Áí∞
      setForceStop(false);
      
      // Ë®òÈåÑ‰ΩøÁî®Èáè
      await recordUsage('aiChat', 1);
    }
  };

  const randomAvatar = () => {
    const randUrl = AVATAR_LIST[Math.floor(Math.random() * AVATAR_LIST.length)];
    handleSelectAvatar(randUrl);
  };

  const handleUploadAvatar = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      // Ê™¢Êü•Êñá‰ª∂È°ûÂûã
      if (!file.type.startsWith('image/')) {
        alert('Ë´ãÈÅ∏ÊìáÂúñÁâáÊñá‰ª∂');
        return;
      }
      
      // Ê™¢Êü•Êñá‰ª∂Â§ßÂ∞è (ÈôêÂà∂ÁÇ∫ 5MB)
      if (file.size > 5 * 1024 * 1024) {
        alert('ÂúñÁâáÂ§ßÂ∞è‰∏çËÉΩË∂ÖÈÅé 5MB');
        return;
      }

      const reader = new FileReader();
      reader.onload = (e) => {
        const result = e.target?.result as string;
        setUploadedAvatar(result);
        handleSelectAvatar(result);
      };
      reader.readAsDataURL(file);
    }
  };

  const triggerFileUpload = () => {
    fileInputRef.current?.click();
  };
  
  // Á¢∫‰øù autoVoiceLoop Âíå recording ÈÉΩÁÇ∫ false ÊôÇÊâçÈáçÁΩÆ forceStop
  useEffect(() => {
    if (!recording && !autoVoiceLoop) setForceStop(false);
  }, [recording, autoVoiceLoop]);

  const handleRenewalModalClose = () => {
    setShowRenewalModal(false);
    setPermissionResult(null);
  };

  return (
    <div style={{ display: 'flex', flexDirection: 'column', height: '100vh', backgroundColor: '#f0f2f5' }}>
      {/* ‰∏äÁ∑£ÔºöAIÂêçÁ®±„ÄÅ‰∏ªÊ®ôÈ°å„ÄÅ‰ΩøÁî®ËÄÖÂêçÁ®± */}
      <header style={{ display: 'flex', flexDirection: 'column', backgroundColor: '#fff', borderBottom: '1px solid #ddd', position: 'relative', padding: 0 }}>
                  <div style={{ width: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center', padding: '10px 20px 0 20px', position: 'relative' }}>
            {/* ËøîÂõûÊåâÈàï */}
            <button onClick={() => navigate(-1)} style={{ position: 'absolute', left: 20, background: '#6B5BFF', color: '#fff', border: 'none', borderRadius: 8, padding: '8px 18px', fontWeight: 700, fontSize: 16, cursor: 'pointer' }}>{BACK_TEXT[lang]}</button>
            {/* AIÂêçÁ®±„ÄÅ‰∏ªÊ®ôÈ°å„ÄÅ‰ΩøÁî®ËÄÖÂêçÁ®± */}
            <span className="ai-name-desktop" style={{ fontWeight: 700, color: '#ff9800', fontSize: 18, marginRight: 12, minWidth: 50, textAlign: 'right', maxWidth: 70, overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>{getAvatarName(aiAvatar) || t.whoAmI}</span>
            <div style={{ fontSize: 20, fontWeight: 700, textAlign: 'center', flexShrink: 0 }}>üí¨ ËÅäÂ§©‰∫ÜÂêß</div>
            <span style={{ fontWeight: 700, color: '#1976d2', fontSize: 18, marginLeft: 12, minWidth: 50, textAlign: 'left', maxWidth: 70, overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>{getAuth().currentUser?.displayName || getAuth().currentUser?.email || 'Áî®Êà∂'}</span>
          </div>
          <div style={{ textAlign: 'center', marginTop: 4 }}>
            <div style={{ fontSize: 16, color: '#888' }}>Âú®ÈÄôË£°‰Ω†ÂèØ‰ª•Áõ°ÊÉÖ,Êö¢Âø´,ÊîæÈñãÂú∞ËÅäüòä</div>
          </div>
      </header>

      {showAvatarSelect && (
        <div style={{ position: 'fixed', top: 0, left: 0, right: 0, bottom: 0, background: 'rgba(0,0,0,0.8)', display: 'flex', justifyContent: 'center', alignItems: 'center', zIndex: 100 }}>
          <div style={{ background: '#fff', padding: 24, borderRadius: 12, textAlign: 'center', position: 'relative' }}>
            {/* X ÈóúÈñâÊåâÈàï */}
            <button 
              onClick={() => setShowAvatarSelect(false)} 
              style={{ 
                position: 'absolute', 
                top: 12, 
                right: 12, 
                background: 'none', 
                border: 'none', 
                fontSize: 24, 
                color: '#888', 
                cursor: 'pointer', 
                fontWeight: 700 
              }}
            >
              √ó
            </button>
            <h2>{t.avatarTitle}</h2>
            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(5, 1fr)', gap: 16, margin: '24px 0' }}>
              {AVATAR_LIST.slice(0, 15).map(url => (
                <img key={url} src={url} alt={getAvatarName(url)} onClick={() => handleSelectAvatar(url)} style={{ width: 80, height: 80, borderRadius: '50%', cursor: 'pointer', objectFit: 'cover' }} />
              ))}
              {/* ‰∏äÂÇ≥ÂøÉÂÑÄÈ†≠ÂÉè */}
              <div 
                style={{ 
                  width: 80, 
                  height: 80, 
                  borderRadius: '50%', 
                  border: '2px dashed #6B5BFF', 
                  display: 'flex', 
                  alignItems: 'center', 
                  justifyContent: 'center', 
                  cursor: 'pointer',
                  background: '#f8f8ff',
                  color: '#6B5BFF',
                  fontSize: 12,
                  fontWeight: 600
                }}
                onClick={triggerFileUpload}
              >
                ‰∏äÂÇ≥ÂøÉÂÑÄÈ†≠ÂÉè
              </div>
            </div>
            {/* Èö±ËóèÁöÑÊñá‰ª∂Ëº∏ÂÖ• */}
            <input
              ref={fileInputRef}
              type="file"
              accept="image/*"
              style={{ display: 'none' }}
              onChange={handleUploadAvatar}
            />
          </div>
        </div>
      )}

      {!aiAvatar && !showAvatarSelect && (
        <div style={{ flex: 1, display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', padding: 24, textAlign: 'center' }}>
          <p style={{ fontSize: 18, marginBottom: 24 }}>{t.welcomePickAvatar(nickname)}</p>
          <button onClick={() => setShowAvatarSelect(true)} style={{ padding: '10px 20px', borderRadius: 8, background: '#1877f2', color: '#fff', border: 'none', fontWeight: 700, fontSize: 16 }}>
            {t.avatarTitle}
          </button>
        </div>
      )}
      
      {aiAvatar && (
        <main 
          ref={chatContainerRef}
          style={{ 
            flex: 1, 
            overflowY: 'auto', 
            padding: '20px',
            maxHeight: 'calc(100vh - 240px)', // Ë™øÊï¥È´òÂ∫¶Ë®àÁÆóÔºåÁÇ∫Âõ∫ÂÆöfooterÈ†êÁïôÁ©∫Èñì
            scrollBehavior: 'smooth',
            boxSizing: 'border-box'
          }}
        >
          <div style={{ maxWidth: 800, margin: '0 auto', minHeight: '100%' }}>
            {messages.length === 0 && (
              <div style={{ textAlign: 'center', color: '#888', marginTop: 40 }}>
                <p style={{ fontSize: 18 }}>{t.welcomeChat(getAvatarName(aiAvatar), nickname)}</p>
              </div>
            )}
            {messages.map((msg) => (
              <div key={msg.id} style={{ 
                display: 'flex', 
                justifyContent: msg.sender === 'user' ? 'flex-end' : 'flex-start', 
                margin: '10px 0',
                wordWrap: 'break-word'
              }}>
                <div style={{
                  backgroundColor: msg.sender === 'user' ? '#0084ff' : '#e4e6eb',
                  color: msg.sender === 'user' ? '#fff' : '#000',
                  padding: '12px 16px',
                  borderRadius: 18,
                  maxWidth: '70%',
                  wordBreak: 'break-word',
                  whiteSpace: 'pre-wrap',
                  lineHeight: '1.4'
                }}>
                  {msg.text}
                  {msg.status === 'streaming' && '...'}
                </div>
              </div>
            ))}
            {/* Á¢∫‰øùÊúÄÂæå‰∏ÄÊ¢ùË®äÊÅØÂæåÊúâË∂≥Â§†Á©∫Èñì */}
            <div style={{ height: '20px' }}></div>
          </div>
        </main>
      )}

      {aiAvatar && (
        <footer style={{ 
          padding: '10px 20px 10px 20px', 
          backgroundColor: '#fff', 
          borderTop: '1px solid #ddd', 
          position: 'relative',
          minHeight: '160px', // Âõ∫ÂÆöÊúÄÂ∞èÈ´òÂ∫¶ÈÅøÂÖç‰ΩàÂ±ÄËÆäÂåñ
          boxSizing: 'border-box'
        }}>
          <div style={{ maxWidth: 800, margin: '0 auto', display: 'flex', alignItems: 'flex-start', justifyContent: 'center' }}>
            <div style={{ flex: 1, marginLeft: 0, marginRight: 0 }}>
              {/* ÊâãÊ©üÁâàÔºöAIÈ†≠ÂÉèÂíå‰ΩøÁî®ËÄÖÈ†≠ÂÉèÂú®Ë®äÊÅØÊ°Ü‰∏äÊñπ */}
              <div className="mobile-avatars-row" style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: 12, padding: '0 8px' }}>
                {/* AIÈ†≠ÂÉè - ÊâãÊ©üÁâàÊ®£Âºè */}
                <div className="mobile-ai-avatar" style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
                  <div style={{ width: 80, height: 80, borderRadius: '50% / 45%', border: '4px solid #2196f3', display: 'flex', alignItems: 'center', justifyContent: 'center', background: '#fff', overflow: 'hidden' }}>
                    <div style={{ width: 72, height: 72, minWidth: 72, minHeight: 72, borderRadius: '50%', overflow: 'hidden', position: 'relative' }}>
                      <div style={{ width: '100%', height: '100%', position: 'relative', overflow: 'hidden' }}>
                        <VirtualAvatar avatar={aiAvatar} videoUrl={avatarVideo} audioUrl={avatarAudio} isSpeaking={isSpeaking} size={72} />
                      </div>
                    </div>
                  </div>
                  <button onClick={() => setShowAvatarSelect(true)} style={{ background: '#6B5BFF', color: '#fff', border: 'none', borderRadius: 6, padding: '4px 8px', fontWeight: 600, fontSize: 10, cursor: 'pointer', boxShadow: '0 2px 4px rgba(107, 91, 255, 0.3)', whiteSpace: 'nowrap' }}>{CHANGE_AVATAR_TEXT[lang]}</button>
                </div>
                {/* ‰∏≠ÈñìÊ≠°ËøéË®äÊÅØ */}
                <div style={{ flex: 1, textAlign: 'center', padding: '0 12px' }}>
                  <div style={{ fontSize: 14, color: '#666', lineHeight: '1.4' }}>
                    <span style={{ fontWeight: 700, color: '#ff9800' }}>{getAvatarName(aiAvatar) || 'Fenny'}</span>
                    <br />
                    <span style={{ color: '#1976d2' }}>ËÆìÊàëÂÄë‰æÜËÅäÂ§©...</span>
                    <br />
                    <span style={{ color: '#1976d2' }}>{getAuth().currentUser?.displayName || getAuth().currentUser?.email || 'Áî®Êà∂'}</span>
                    <br />
                    <span style={{ color: '#666' }}>ËÅä‰ªÄÈ∫ºÈÉΩÂèØ‰ª•Âñî üòä</span>
                  </div>
                </div>
                {/* ‰ΩøÁî®ËÄÖÈ†≠ÂÉè - ÊâãÊ©üÁâàÊ®£Âºè */}
                <div style={{ width: 80, height: 80, borderRadius: '50% / 45%', border: '4px solid #2196f3', display: 'flex', alignItems: 'center', justifyContent: 'center', background: '#fff', overflow: 'visible' }}>
                  <img src={getAuth().currentUser?.photoURL || '/ctx-logo.png'} alt="user" style={{ width: 72, height: 72, minWidth: 72, minHeight: 72, borderRadius: '50%', objectFit: 'cover', border: 'none', verticalAlign: 'bottom' }} />
                </div>
              </div>
              <div style={{ display: 'flex', alignItems: 'flex-end', height: 80 }}>
                <input
                  ref={inputRef}
                  type="text"
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleSend()}
                  placeholder={aiStreaming ? t.aiReplying : t.inputPlaceholder}
                  style={{ width: '100%', padding: 12, borderRadius: 18, border: '1px solid #ccc' }}
                  disabled={aiStreaming || recognizing}
                />
              </div>
              {/* ÊâãÊ©üÁâàÔºöÈÄÅÂá∫ËàáÈ∫•ÂÖãÈ¢®ÊåâÈàïÂú®Ëº∏ÂÖ•Ê°Ü‰∏ãÊñπÁΩÆ‰∏≠ */}
              <div className="chat-action-row-mobile" style={{ width: '100%', display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'center', marginTop: 12, gap: 16 }}>
                <button
                  onClick={() => handleSend()}
                  disabled={aiStreaming || !input}
                  style={{ padding: '10px 28px', borderRadius: 8, border: 'none', background: '#1976d2', color: '#fff', fontWeight: 700, fontSize: 16, cursor: aiStreaming || !input ? 'not-allowed' : 'pointer' }}
                >ÈÄÅÂá∫</button>
                <button
                  onClick={handleRecordVoice}
                  disabled={aiStreaming}
                  style={{ padding: 16, borderRadius: '50%', border: 'none', background: (recording || autoVoiceLoop || recognizing) ? '#ff4d4d' : '#1877f2', color: '#fff', cursor: 'pointer', fontSize: 20 }}
                >
                  {(recording || autoVoiceLoop || recognizing) ? 'ÂÅúÊ≠¢' : 'üé§'}
                </button>
              </div>
              {/* ÈõªËÖ¶ÁâàÔºöÈÄÅÂá∫ËàáÈ∫•ÂÖãÈ¢®ÊåâÈàïÂú®Ëº∏ÂÖ•Ê°Ü‰∏ãÊñπÁΩÆ‰∏≠ */}
              <div className="chat-action-row-desktop" style={{ width: '100%', display: 'none', flexDirection: 'row', alignItems: 'center', justifyContent: 'center', marginTop: 12, gap: 16 }}>
                <button
                  onClick={() => handleSend()}
                  disabled={aiStreaming || !input}
                  style={{ padding: '10px 28px', borderRadius: 8, border: 'none', background: '#1976d2', color: '#fff', fontWeight: 700, fontSize: 16, cursor: aiStreaming || !input ? 'not-allowed' : 'pointer' }}
                >ÈÄÅÂá∫</button>
                <button
                  onClick={handleRecordVoice}
                  disabled={aiStreaming}
                  style={{ padding: 16, borderRadius: '50%', border: 'none', background: (recording || autoVoiceLoop || recognizing) ? '#ff4d4d' : '#1877f2', color: '#fff', cursor: 'pointer', fontSize: 20 }}
                >
                  {(recording || autoVoiceLoop || recognizing) ? 'ÂÅúÊ≠¢' : 'üé§'}
                </button>
              </div>
              {/* Âõ∫ÂÆöÈ´òÂ∫¶ÁöÑÊèêÁ§∫ÂçÄÂüüÔºåÈÅøÂÖç‰ΩàÂ±ÄÈñÉÂãï */}
              <div style={{ height: 40, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
                {speechError && <p style={{ color: 'red', margin: 0 }}>{speechError}</p>}
                {!speechError && !input && !recognizing && !aiStreaming && !recording && !autoVoiceLoop &&
                  <p style={{ color: '#888', margin: 0, cursor: 'pointer' }} onClick={handleRecordVoice}>{t.tapToTalk}</p>
                }
                {!speechError && recognizing && <p style={{ color: '#888', margin: 0 }}>{t.recognizing}</p>}
                {!speechError && (input || aiStreaming || recording || autoVoiceLoop) && <p style={{ color: 'transparent', margin: 0 }}>‰Ωî‰Ωç</p>}
              </div>
            </div>
          </div>
          <div style={{ textAlign: 'center', marginTop: 10, fontSize: 12, color: '#aaa' }}>
              <p>{t.companionPhrase[0]}{t.companionPhrase[1]}</p>
          </div>
        </footer>
      )}
      
      {/* Footer */}
      {window.innerWidth <= 768 ? (
        // ÊâãÊ©üÁâà Footer - Ë§áË£ΩËá™ÊàëÁöÑÈáåÁ®ãÁ¢ëÈ†ÅÈù¢
        <footer style={{ 
          textAlign: 'center', 
          fontSize: 12, 
          color: '#888', 
          marginTop: 20, 
          padding: 12,
          background: 'rgba(255,255,255,0.95)',
          borderTop: '1px solid #eee',
          display: 'flex',
          flexDirection: 'column',
          gap: 8
        }}>
          {/* Á¨¨‰∏ÄË°åÔºöÈö±ÁßÅÊ¨äÊîøÁ≠ñ„ÄÅÊ¢ùÊ¨æ/ËÅ≤Êòé„ÄÅË≥áÊñôÂà™Èô§Ë™™Êòé */}
          <div style={{ display: 'flex', justifyContent: 'center', gap: 16, flexWrap: 'wrap' }}>
            <a href="/privacy-policy" style={{ color: '#6B5BFF', textDecoration: 'underline', fontSize: 11 }}>
              {lang === 'zh-TW' ? 'Èö±ÁßÅÊ¨äÊîøÁ≠ñ' : 
               lang === 'zh-CN' ? 'ÈöêÁßÅÊîøÁ≠ñ' : 
               lang === 'en' ? 'Privacy Policy' : 
               lang === 'ja' ? '„Éó„É©„Ç§„Éê„Ç∑„Éº„Éù„É™„Ç∑„Éº' : 
               lang === 'ko' ? 'Í∞úÏù∏Ï†ïÎ≥¥ Ï≤òÎ¶¨Î∞©Ïπ®' : 
               lang === 'th' ? '‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß' : 
               lang === 'vi' ? 'Ch√≠nh s√°ch b·∫£o m·∫≠t' : 
               lang === 'ms' ? 'Dasar Privasi' : 
               'Consilium de Privata'}
            </a>
            <a href="/terms" style={{ color: '#6B5BFF', textDecoration: 'underline', fontSize: 11 }}>
              {lang === 'zh-TW' ? 'Ê¢ùÊ¨æ/ËÅ≤Êòé' : 
               lang === 'zh-CN' ? 'Êù°Ê¨æ/Â£∞Êòé' : 
               lang === 'en' ? 'Terms/Statement' : 
               lang === 'ja' ? 'Ë¶èÁ¥Ñ/Â£∞Êòé' : 
               lang === 'ko' ? 'ÏïΩÍ¥Ä/ÏÑ±Î™Ö' : 
               lang === 'th' ? '‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î/‡πÅ‡∏ñ‡∏•‡∏á‡∏Å‡∏≤‡∏£‡∏ì‡πå' : 
               lang === 'vi' ? 'ƒêi·ªÅu kho·∫£n/Tuy√™n b·ªë' : 
               lang === 'ms' ? 'Terma/Pernyataan' : 
               'Termini/Declaratio'}
            </a>
            <a href="/data-deletion" style={{ color: '#6B5BFF', textDecoration: 'underline', fontSize: 11 }}>
              {lang === 'zh-TW' ? 'Ë≥áÊñôÂà™Èô§Ë™™Êòé' : 
               lang === 'zh-CN' ? 'Êï∞ÊçÆÂà†Èô§ËØ¥Êòé' : 
               lang === 'en' ? 'Data Deletion' : 
               lang === 'ja' ? '„Éá„Éº„ÇøÂâäÈô§„Å´„Å§„ÅÑ„Å¶' : 
               lang === 'ko' ? 'Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú ÏïàÎÇ¥' : 
               lang === 'th' ? '‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' : 
               lang === 'vi' ? 'Gi·∫£i th√≠ch x√≥a d·ªØ li·ªáu' : 
               lang === 'ms' ? 'Penjelasan Penghapusan Data' : 
               'Explicatio Deletionis Datae'}
            </a>
          </div>
          {/* Á¨¨‰∫åË°åÔºöÊàëÂÄëÊòØË™∞„ÄÅÊÑèË¶ãÁÆ± */}
          <div style={{ display: 'flex', justifyContent: 'center', gap: 16, flexWrap: 'wrap' }}>
            <a href="/about" style={{ color: '#6B5BFF', textDecoration: 'underline', fontWeight: 600, fontSize: 11 }}>
              {lang === 'zh-TW' ? 'üß¨ ÊàëÂÄëÊòØË™∞' : 
               lang === 'zh-CN' ? 'üß¨ Êàë‰ª¨ÊòØË∞Å' : 
               lang === 'en' ? 'üß¨ Who We Are' : 
               lang === 'ja' ? 'üß¨ ÁßÅ„Åü„Å°„Å´„Å§„ÅÑ„Å¶' : 
               lang === 'ko' ? 'üß¨ Ïö∞Î¶¨Îäî ÎàÑÍµ¨Ïù∏Í∞Ä' : 
               lang === 'th' ? 'üß¨ ‡πÄ‡∏£‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏Ñ‡∏£' : 
               lang === 'vi' ? 'üß¨ Ch√∫ng t√¥i l√† ai' : 
               lang === 'ms' ? 'üß¨ Siapa Kami' : 
               'üß¨ Quis sumus'}
            </a>
            <a href="/feedback" style={{ color: '#6B5BFF', textDecoration: 'underline', fontWeight: 600, fontSize: 11 }}>
              {lang === 'zh-TW' ? 'üí¨ ÊÑèË¶ãÁÆ±' : 
               lang === 'zh-CN' ? 'üí¨ ÊÑèËßÅÁÆ±' : 
               lang === 'en' ? 'üí¨ Feedback' : 
               lang === 'ja' ? 'üí¨ „ÅîÊÑèË¶ãÁÆ±' : 
               lang === 'ko' ? 'üí¨ ÌîºÎìúÎ∞±' : 
               lang === 'th' ? 'üí¨ ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô' : 
               lang === 'vi' ? 'üí¨ H·ªôp g√≥p √Ω' : 
               lang === 'ms' ? 'üí¨ Kotak Maklum Balas' : 
               'üí¨ Arca Consilii'}
            </a>
          </div>
        </footer>
      ) : (
        // Ê°åÈù¢Áâà Footer
        <Footer />
      )}
      
      {/* Token Á∫åË≥ºÂΩàÁ™ó */}
      {showRenewalModal && permissionResult && (
        <TokenRenewalModal
          isOpen={showRenewalModal}
          onClose={handleRenewalModalClose}
          currentPlan={permissionResult.currentPlan}
          remainingDays={permissionResult.remainingDays}
          usedTokens={permissionResult.usedTokens}
          totalTokens={permissionResult.totalTokens}
        />
      )}

      {/* ÂçáÁ¥öÂΩàÁ™ó */}
      {showUpgradeModal && (
        <UpgradeModal
          isOpen={showUpgradeModal}
          onClose={() => setShowUpgradeModal(false)}
          featureName="AI ËÅäÂ§©"
        />
      )}
    </div>
  );
}

<style>{`
  @media (min-width: 768px) {
    .emotion-phrase-left {
      position: fixed;
      top: 32%;
      left: 2vw;
      z-index: 1001;
      color: #fff;
      font-size: 1.1rem;
      font-weight: 400;
      text-shadow: 0 2px 8px #23294688;
      background: rgba(0,0,0,0.18);
      border-radius: 10px;
      padding: 6px 18px;
      backdrop-filter: blur(2px);
      box-shadow: 0 2px 12px #0002;
      display: block;
    }
    .emotion-phrase-right {
      position: fixed;
      top: 32%;
      right: 2vw;
      z-index: 1001;
      color: #fff;
      font-size: 1.1rem;
      font-weight: 400;
      text-shadow: 0 2px 8px #23294688;
      background: rgba(0,0,0,0.18);
      border-radius: 10px;
      padding: 6px 18px;
      backdrop-filter: blur(2px);
      box-shadow: 0 2px 12px #0002;
      text-align: right;
      display: block;
    }
    .emotion-phrase-mobile-top, .emotion-phrase-mobile-bottom {
      display: none;
    }
  }
  @media (max-width: 767px) {
    .emotion-phrase-left, .emotion-phrase-right {
      display: none;
    }
    .emotion-phrase-mobile-top {
      position: fixed;
      top: 70px;
      left: 0;
      width: 100vw;
      z-index: 1001;
      color: #fff;
      font-size: 1.08rem;
      font-weight: 400;
      text-shadow: 0 2px 8px #23294688;
      background: rgba(0,0,0,0.18);
      border-radius: 10px;
      padding: 6px 18px;
      backdrop-filter: blur(2px);
      box-shadow: 0 2px 12px #0002;
      text-align: center;
      display: block;
    }
    .emotion-phrase-mobile-bottom {
      position: fixed;
      bottom: 60px;
      left: 0;
      width: 100vw;
      z-index: 1001;
      color: #fff;
      font-size: 1.08rem;
      font-weight: 400;
      text-shadow: 0 2px 8px #23294688;
      background: rgba(0,0,0,0.18);
      border-radius: 10px;
      padding: 6px 18px;
      backdrop-filter: blur(2px);
      box-shadow: 0 2px 12px #0002;
      text-align: center;
      display: block;
    }
  }
  .companion-phrase-left {
    position: absolute;
    top: 120px;
    left: 32px;
    color: rgba(255,255,255,0.85);
    font-size: 1.15rem;
    line-height: 1.6;
    max-width: 200px;
    text-shadow: 0 2px 8px #23294688;
    z-index: 1001;
    font-weight: 400;
    pointer-events: none;
    letter-spacing: 0.5px;
    background: rgba(0,0,0,0.10);
    border-radius: 10px;
    padding: 8px 16px;
    box-shadow: 0 2px 12px #0002;
    backdrop-filter: blur(2px);
  }
  @media (max-width: 767px) {
    .companion-phrase-left {
      position: static;
      margin: 12px auto 0 auto;
      left: unset;
      top: unset;
      display: block;
      text-align: center;
      max-width: 90vw;
      background: rgba(0,0,0,0.18);
    }
  }
  @media (min-width: 768px) {
    .change-avatar-desktop { display: block !important; }
    .change-avatar-mobile { display: none !important; }
    .ai-avatar-img-wrap { width: 40px !important; height: 40px !important; }
    .ai-name-desktop { max-width: 120px !important; }
    .chat-action-row-mobile { display: none !important; }
    .chat-action-row-desktop { display: flex !important; }
    .mobile-avatars-row { display: none !important; }
  }
  @media (max-width: 767px) {
    .change-avatar-desktop { display: none !important; }
    .change-avatar-mobile { display: block !important; }
    .ai-avatar-img-wrap { width: 40px !important; height: 40px !important; }
    .ai-name-desktop { max-width: 100px !important; }
    .chat-action-row-mobile { display: flex !important; }
    .chat-action-row-desktop { display: none !important; }
    .mobile-avatars-row { display: flex !important; }
  }
`}</style> 